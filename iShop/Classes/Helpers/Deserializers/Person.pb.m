// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Person.pb.h"

@implementation PersonRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [PersonRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Person ()
@property int32_t entryId;
@property (retain) NSString* firstName;
@property (retain) NSString* lastName;
@property (retain) NSString* phone;
@property (retain) NSString* email;
@property (retain) NSString* address;
@property (retain) NSString* city;
@property (retain) NSString* zip;
@property (retain) NSString* state;
@property (retain) NSString* country;
@property (retain) NSString* description;
@property (retain) NSString* password;
@property (retain) NSString* createdOn;
@property (retain) NSString* modifiedOn;
@end

@implementation Person

- (BOOL) hasEntryId {
  return !!hasEntryId_;
}
- (void) setHasEntryId:(BOOL) value {
  hasEntryId_ = !!value;
}
@synthesize entryId;
- (BOOL) hasFirstName {
  return !!hasFirstName_;
}
- (void) setHasFirstName:(BOOL) value {
  hasFirstName_ = !!value;
}
@synthesize firstName;
- (BOOL) hasLastName {
  return !!hasLastName_;
}
- (void) setHasLastName:(BOOL) value {
  hasLastName_ = !!value;
}
@synthesize lastName;
- (BOOL) hasPhone {
  return !!hasPhone_;
}
- (void) setHasPhone:(BOOL) value {
  hasPhone_ = !!value;
}
@synthesize phone;
- (BOOL) hasEmail {
  return !!hasEmail_;
}
- (void) setHasEmail:(BOOL) value {
  hasEmail_ = !!value;
}
@synthesize email;
- (BOOL) hasAddress {
  return !!hasAddress_;
}
- (void) setHasAddress:(BOOL) value {
  hasAddress_ = !!value;
}
@synthesize address;
- (BOOL) hasCity {
  return !!hasCity_;
}
- (void) setHasCity:(BOOL) value {
  hasCity_ = !!value;
}
@synthesize city;
- (BOOL) hasZip {
  return !!hasZip_;
}
- (void) setHasZip:(BOOL) value {
  hasZip_ = !!value;
}
@synthesize zip;
- (BOOL) hasState {
  return !!hasState_;
}
- (void) setHasState:(BOOL) value {
  hasState_ = !!value;
}
@synthesize state;
- (BOOL) hasCountry {
  return !!hasCountry_;
}
- (void) setHasCountry:(BOOL) value {
  hasCountry_ = !!value;
}
@synthesize country;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasCreatedOn {
  return !!hasCreatedOn_;
}
- (void) setHasCreatedOn:(BOOL) value {
  hasCreatedOn_ = !!value;
}
@synthesize createdOn;
- (BOOL) hasModifiedOn {
  return !!hasModifiedOn_;
}
- (void) setHasModifiedOn:(BOOL) value {
  hasModifiedOn_ = !!value;
}
@synthesize modifiedOn;
- (void) dealloc {
  self.firstName = nil;
  self.lastName = nil;
  self.phone = nil;
  self.email = nil;
  self.address = nil;
  self.city = nil;
  self.zip = nil;
  self.state = nil;
  self.country = nil;
  self.description = nil;
  self.password = nil;
  self.createdOn = nil;
  self.modifiedOn = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.entryId = 0;
    self.firstName = @"";
    self.lastName = @"";
    self.phone = @"";
    self.email = @"";
    self.address = @"";
    self.city = @"";
    self.zip = @"";
    self.state = @"";
    self.country = @"";
    self.description = @"";
    self.password = @"";
    self.createdOn = @"";
    self.modifiedOn = @"";
  }
  return self;
}
static Person* defaultPersonInstance = nil;
+ (void) initialize {
  if (self == [Person class]) {
    defaultPersonInstance = [[Person alloc] init];
  }
}
+ (Person*) defaultInstance {
  return defaultPersonInstance;
}
- (Person*) defaultInstance {
  return defaultPersonInstance;
}
- (BOOL) isInitialized {
  if (!self.hasEntryId) {
    return NO;
  }
  if (!self.hasFirstName) {
    return NO;
  }
  if (!self.hasLastName) {
    return NO;
  }
  if (!self.hasPhone) {
    return NO;
  }
  if (!self.hasEmail) {
    return NO;
  }
  if (!self.hasAddress) {
    return NO;
  }
  if (!self.hasCity) {
    return NO;
  }
  if (!self.hasZip) {
    return NO;
  }
  if (!self.hasState) {
    return NO;
  }
  if (!self.hasCountry) {
    return NO;
  }
  if (!self.hasDescription) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  if (!self.hasCreatedOn) {
    return NO;
  }
  if (!self.hasModifiedOn) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasEntryId) {
    [output writeInt32:1 value:self.entryId];
  }
  if (self.hasFirstName) {
    [output writeString:2 value:self.firstName];
  }
  if (self.hasLastName) {
    [output writeString:3 value:self.lastName];
  }
  if (self.hasPhone) {
    [output writeString:4 value:self.phone];
  }
  if (self.hasEmail) {
    [output writeString:5 value:self.email];
  }
  if (self.hasAddress) {
    [output writeString:6 value:self.address];
  }
  if (self.hasCity) {
    [output writeString:7 value:self.city];
  }
  if (self.hasZip) {
    [output writeString:8 value:self.zip];
  }
  if (self.hasState) {
    [output writeString:9 value:self.state];
  }
  if (self.hasCountry) {
    [output writeString:10 value:self.country];
  }
  if (self.hasDescription) {
    [output writeString:11 value:self.description];
  }
  if (self.hasPassword) {
    [output writeString:12 value:self.password];
  }
  if (self.hasCreatedOn) {
    [output writeString:13 value:self.createdOn];
  }
  if (self.hasModifiedOn) {
    [output writeString:14 value:self.modifiedOn];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasEntryId) {
    size += computeInt32Size(1, self.entryId);
  }
  if (self.hasFirstName) {
    size += computeStringSize(2, self.firstName);
  }
  if (self.hasLastName) {
    size += computeStringSize(3, self.lastName);
  }
  if (self.hasPhone) {
    size += computeStringSize(4, self.phone);
  }
  if (self.hasEmail) {
    size += computeStringSize(5, self.email);
  }
  if (self.hasAddress) {
    size += computeStringSize(6, self.address);
  }
  if (self.hasCity) {
    size += computeStringSize(7, self.city);
  }
  if (self.hasZip) {
    size += computeStringSize(8, self.zip);
  }
  if (self.hasState) {
    size += computeStringSize(9, self.state);
  }
  if (self.hasCountry) {
    size += computeStringSize(10, self.country);
  }
  if (self.hasDescription) {
    size += computeStringSize(11, self.description);
  }
  if (self.hasPassword) {
    size += computeStringSize(12, self.password);
  }
  if (self.hasCreatedOn) {
    size += computeStringSize(13, self.createdOn);
  }
  if (self.hasModifiedOn) {
    size += computeStringSize(14, self.modifiedOn);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Person*) parseFromData:(NSData*) data {
  return (Person*)[[[Person builder] mergeFromData:data] build];
}
+ (Person*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Person*) parseFromInputStream:(NSInputStream*) input {
  return (Person*)[[[Person builder] mergeFromInputStream:input] build];
}
+ (Person*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Person*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Person*)[[[Person builder] mergeFromCodedInputStream:input] build];
}
+ (Person*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Person*)[[[Person builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Person_Builder*) builder {
  return [[[Person_Builder alloc] init] autorelease];
}
+ (Person_Builder*) builderWithPrototype:(Person*) prototype {
  return [[Person builder] mergeFrom:prototype];
}
- (Person_Builder*) builder {
  return [Person builder];
}
@end

@interface Person_Builder()
@property (retain) Person* result;
@end

@implementation Person_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Person alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Person_Builder*) clear {
  self.result = [[[Person alloc] init] autorelease];
  return self;
}
- (Person_Builder*) clone {
  return [Person builderWithPrototype:result];
}
- (Person*) defaultInstance {
  return [Person defaultInstance];
}
- (Person*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Person*) buildPartial {
  Person* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Person_Builder*) mergeFrom:(Person*) other {
  if (other == [Person defaultInstance]) {
    return self;
  }
  if (other.hasEntryId) {
    [self setEntryId:other.entryId];
  }
  if (other.hasFirstName) {
    [self setFirstName:other.firstName];
  }
  if (other.hasLastName) {
    [self setLastName:other.lastName];
  }
  if (other.hasPhone) {
    [self setPhone:other.phone];
  }
  if (other.hasEmail) {
    [self setEmail:other.email];
  }
  if (other.hasAddress) {
    [self setAddress:other.address];
  }
  if (other.hasCity) {
    [self setCity:other.city];
  }
  if (other.hasZip) {
    [self setZip:other.zip];
  }
  if (other.hasState) {
    [self setState:other.state];
  }
  if (other.hasCountry) {
    [self setCountry:other.country];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasCreatedOn) {
    [self setCreatedOn:other.createdOn];
  }
  if (other.hasModifiedOn) {
    [self setModifiedOn:other.modifiedOn];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Person_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Person_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setEntryId:[input readInt32]];
        break;
      }
      case 18: {
        [self setFirstName:[input readString]];
        break;
      }
      case 26: {
        [self setLastName:[input readString]];
        break;
      }
      case 34: {
        [self setPhone:[input readString]];
        break;
      }
      case 42: {
        [self setEmail:[input readString]];
        break;
      }
      case 50: {
        [self setAddress:[input readString]];
        break;
      }
      case 58: {
        [self setCity:[input readString]];
        break;
      }
      case 66: {
        [self setZip:[input readString]];
        break;
      }
      case 74: {
        [self setState:[input readString]];
        break;
      }
      case 82: {
        [self setCountry:[input readString]];
        break;
      }
      case 90: {
        [self setDescription:[input readString]];
        break;
      }
      case 98: {
        [self setPassword:[input readString]];
        break;
      }
      case 106: {
        [self setCreatedOn:[input readString]];
        break;
      }
      case 114: {
        [self setModifiedOn:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasEntryId {
  return result.hasEntryId;
}
- (int32_t) entryId {
  return result.entryId;
}
- (Person_Builder*) setEntryId:(int32_t) value {
  result.hasEntryId = YES;
  result.entryId = value;
  return self;
}
- (Person_Builder*) clearEntryId {
  result.hasEntryId = NO;
  result.entryId = 0;
  return self;
}
- (BOOL) hasFirstName {
  return result.hasFirstName;
}
- (NSString*) firstName {
  return result.firstName;
}
- (Person_Builder*) setFirstName:(NSString*) value {
  result.hasFirstName = YES;
  result.firstName = value;
  return self;
}
- (Person_Builder*) clearFirstName {
  result.hasFirstName = NO;
  result.firstName = @"";
  return self;
}
- (BOOL) hasLastName {
  return result.hasLastName;
}
- (NSString*) lastName {
  return result.lastName;
}
- (Person_Builder*) setLastName:(NSString*) value {
  result.hasLastName = YES;
  result.lastName = value;
  return self;
}
- (Person_Builder*) clearLastName {
  result.hasLastName = NO;
  result.lastName = @"";
  return self;
}
- (BOOL) hasPhone {
  return result.hasPhone;
}
- (NSString*) phone {
  return result.phone;
}
- (Person_Builder*) setPhone:(NSString*) value {
  result.hasPhone = YES;
  result.phone = value;
  return self;
}
- (Person_Builder*) clearPhone {
  result.hasPhone = NO;
  result.phone = @"";
  return self;
}
- (BOOL) hasEmail {
  return result.hasEmail;
}
- (NSString*) email {
  return result.email;
}
- (Person_Builder*) setEmail:(NSString*) value {
  result.hasEmail = YES;
  result.email = value;
  return self;
}
- (Person_Builder*) clearEmail {
  result.hasEmail = NO;
  result.email = @"";
  return self;
}
- (BOOL) hasAddress {
  return result.hasAddress;
}
- (NSString*) address {
  return result.address;
}
- (Person_Builder*) setAddress:(NSString*) value {
  result.hasAddress = YES;
  result.address = value;
  return self;
}
- (Person_Builder*) clearAddress {
  result.hasAddress = NO;
  result.address = @"";
  return self;
}
- (BOOL) hasCity {
  return result.hasCity;
}
- (NSString*) city {
  return result.city;
}
- (Person_Builder*) setCity:(NSString*) value {
  result.hasCity = YES;
  result.city = value;
  return self;
}
- (Person_Builder*) clearCity {
  result.hasCity = NO;
  result.city = @"";
  return self;
}
- (BOOL) hasZip {
  return result.hasZip;
}
- (NSString*) zip {
  return result.zip;
}
- (Person_Builder*) setZip:(NSString*) value {
  result.hasZip = YES;
  result.zip = value;
  return self;
}
- (Person_Builder*) clearZip {
  result.hasZip = NO;
  result.zip = @"";
  return self;
}
- (BOOL) hasState {
  return result.hasState;
}
- (NSString*) state {
  return result.state;
}
- (Person_Builder*) setState:(NSString*) value {
  result.hasState = YES;
  result.state = value;
  return self;
}
- (Person_Builder*) clearState {
  result.hasState = NO;
  result.state = @"";
  return self;
}
- (BOOL) hasCountry {
  return result.hasCountry;
}
- (NSString*) country {
  return result.country;
}
- (Person_Builder*) setCountry:(NSString*) value {
  result.hasCountry = YES;
  result.country = value;
  return self;
}
- (Person_Builder*) clearCountry {
  result.hasCountry = NO;
  result.country = @"";
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (Person_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (Person_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (Person_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (Person_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasCreatedOn {
  return result.hasCreatedOn;
}
- (NSString*) createdOn {
  return result.createdOn;
}
- (Person_Builder*) setCreatedOn:(NSString*) value {
  result.hasCreatedOn = YES;
  result.createdOn = value;
  return self;
}
- (Person_Builder*) clearCreatedOn {
  result.hasCreatedOn = NO;
  result.createdOn = @"";
  return self;
}
- (BOOL) hasModifiedOn {
  return result.hasModifiedOn;
}
- (NSString*) modifiedOn {
  return result.modifiedOn;
}
- (Person_Builder*) setModifiedOn:(NSString*) value {
  result.hasModifiedOn = YES;
  result.modifiedOn = value;
  return self;
}
- (Person_Builder*) clearModifiedOn {
  result.hasModifiedOn = NO;
  result.modifiedOn = @"";
  return self;
}
@end

@interface Data ()
@property (retain) NSMutableArray* mutablePersonList;
@end

@implementation Data

@synthesize mutablePersonList;
- (void) dealloc {
  self.mutablePersonList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static Data* defaultDataInstance = nil;
+ (void) initialize {
  if (self == [Data class]) {
    defaultDataInstance = [[Data alloc] init];
  }
}
+ (Data*) defaultInstance {
  return defaultDataInstance;
}
- (Data*) defaultInstance {
  return defaultDataInstance;
}
- (NSArray*) personList {
  return mutablePersonList;
}
- (Person*) personAtIndex:(int32_t) index {
  id value = [mutablePersonList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (Person* element in self.personList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (Person* element in self.personList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (Person* element in self.personList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Data*) parseFromData:(NSData*) data {
  return (Data*)[[[Data builder] mergeFromData:data] build];
}
+ (Data*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Data*)[[[Data builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Data*) parseFromInputStream:(NSInputStream*) input {
  return (Data*)[[[Data builder] mergeFromInputStream:input] build];
}
+ (Data*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Data*)[[[Data builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Data*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Data*)[[[Data builder] mergeFromCodedInputStream:input] build];
}
+ (Data*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Data*)[[[Data builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Data_Builder*) builder {
  return [[[Data_Builder alloc] init] autorelease];
}
+ (Data_Builder*) builderWithPrototype:(Data*) prototype {
  return [[Data builder] mergeFrom:prototype];
}
- (Data_Builder*) builder {
  return [Data builder];
}
@end

@interface Data_Builder()
@property (retain) Data* result;
@end

@implementation Data_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Data alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Data_Builder*) clear {
  self.result = [[[Data alloc] init] autorelease];
  return self;
}
- (Data_Builder*) clone {
  return [Data builderWithPrototype:result];
}
- (Data*) defaultInstance {
  return [Data defaultInstance];
}
- (Data*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Data*) buildPartial {
  Data* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Data_Builder*) mergeFrom:(Data*) other {
  if (other == [Data defaultInstance]) {
    return self;
  }
  if (other.mutablePersonList.count > 0) {
    if (result.mutablePersonList == nil) {
      result.mutablePersonList = [NSMutableArray array];
    }
    [result.mutablePersonList addObjectsFromArray:other.mutablePersonList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Data_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Data_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Person_Builder* subBuilder = [Person builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPerson:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) personList {
  if (result.mutablePersonList == nil) { return [NSArray array]; }
  return result.mutablePersonList;
}
- (Person*) personAtIndex:(int32_t) index {
  return [result personAtIndex:index];
}
- (Data_Builder*) replacePersonAtIndex:(int32_t) index with:(Person*) value {
  [result.mutablePersonList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Data_Builder*) addAllPerson:(NSArray*) values {
  if (result.mutablePersonList == nil) {
    result.mutablePersonList = [NSMutableArray array];
  }
  [result.mutablePersonList addObjectsFromArray:values];
  return self;
}
- (Data_Builder*) clearPersonList {
  result.mutablePersonList = nil;
  return self;
}
- (Data_Builder*) addPerson:(Person*) value {
  if (result.mutablePersonList == nil) {
    result.mutablePersonList = [NSMutableArray array];
  }
  [result.mutablePersonList addObject:value];
  return self;
}
@end

